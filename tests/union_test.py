import polybool as pb


def test_case_1():
    region_a = [
        (174.731903, -72.989276),
        (-70.77748, -53.08311),
        (-72.252011, 215.281501),
        (129.021448, 126.809651),
        (106.16622, 28.016086),
        (216.756032, 22.117962),
        (174.731903, -72.989276),
    ]

    region_b = [
        (-169.571046, -98.793566),
        (-145.241287, 63.404826),
        (11.796247, 34.651475),
        (8.10992, -129.758713),
        (-76.675603, -216.018767),
        (-169.571046, -98.793566),
    ]

    result = pb.union(pb.Polygon([region_a]), pb.Polygon([region_b]))

    assert len(result.regions) == 1

    region = result.regions[0]

    except_region = [
        216.756032,
        22.117962,
        174.731903,
        -72.989276,
        9.68283014596045,
        -59.60691886875095,
        8.10992,
        -129.758713,
        -76.675603,
        -216.018767,
        -169.571046,
        -98.793566,
        -145.241287,
        63.404826,
        -71.34317949796957,
        49.87418673740427,
        -72.252011,
        215.281501,
        129.021448,
        126.809651,
        106.16622,
        28.016086,
    ]
    assert len(region) * 2 == len(except_region)

    for i in range(len(region)):
        assert region[i].x == except_region[i * 2]
        assert region[i].y == except_region[i * 2 + 1]


def test_case_2():
    regions = [
        [
            (730.59859751116562, -390.71295523446059),
            (615.35307569431279, -337.12892286830862),
            (612.40179980847529, -343.47636098503529),
            (727.64732162532812, -397.06039335118726),
            (730.59859751116562, -390.71295523446059),
        ],
        [
            (560.05206094364189, -424.19915270606077),
            (563.24375903933151, -304.39619864558551),
            (556.24624186080405, -304.20977617855698),
            (553.05454376511443, -424.01273023903224),
            (560.05206094364189, -424.19915270606077),
        ],
        [
            (629.84175141276103, -302.66920925002108),
            (459.49199784501354, -298.13088222522242),
            (459.30557537798506, -305.12839940374988),
            (629.65532894573255, -309.66672642854854),
            (629.84175141276103, -302.66920925002108),
        ],
        [
            (577.37742051290581, -427.10631958694233),
            (644.72835427262908, -282.25172087080244),
            (638.38091615590247, -279.300444984965),
            (571.02998239617921, -424.15504370110489),
            (577.37742051290581, -427.10631958694233),
        ],
        [
            (752.24153075264121, -81.325235022248876),
            (705.41226531283348, -182.04298420231274),
            (711.75970342956009, -184.99426008815018),
            (758.58896886936782, -84.276510908086266),
            (752.24153075264121, -81.325235022248876),
        ],
        [
            (662.66229477345507, -290.59020407690974),
            (711.75970342955986, -184.99426008815007),
            (705.41226531283326, -182.04298420231262),
            (656.31485665672847, -287.6389281910723),
            (662.66229477345507, -290.59020407690974),
        ],
        [
            (807.37320363014226, -225.59045224691286),
            (642.17510334963617, -148.78069675528539),
            (639.22382746379867, -155.12813487201205),
            (804.42192774430475, -231.93789036363953),
            (807.37320363014226, -225.59045224691286),
        ],
        [
            (627.32903578534979, -180.71078353343543),
            (530.68339045364303, -135.774864932349),
            (527.73211456780552, -142.12230304907567),
            (624.37775989951228, -187.0582216501621),
            (627.32903578534979, -180.71078353343543),
        ],
        [
            (594.77577580897571, -259.02599774532706),
            (678.12452555689913, -79.764196545958214),
            (671.77708744017252, -76.812920660120824),
            (588.4283376922491, -256.07472185948961),
            (594.77577580897571, -259.02599774532706),
        ],
        [
            (474.88089699084082, -207.14004649461958),
            (755.32451908819985, -337.53383435239914),
            (758.27579497403735, -331.18639623567248),
            (477.83217287667833, -200.79260837789292),
            (474.88089699084082, -207.14004649461958),
        ],
    ]

    polygons = [pb.Polygon([region]) for region in regions]

    # polygons.reverse()

    res = pb.union(polygons)
    print()
    print(len(res.regions))
